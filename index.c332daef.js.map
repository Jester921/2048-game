{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */ class $a5fd07fa01589658$var$Game {\n    /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        if (initialState.length === 4 && initialState.every((row)=>row.length === 4)) {\n            this.initialState = initialState;\n            this.restart();\n        } else throw new Error(\"Initial state is not valid!\");\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const result = this.moveTiles(true, false);\n            if (this.isStateDifferent(result.state)) this.updateGame(result);\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const result = this.moveTiles(true, true);\n            if (this.isStateDifferent(result.state)) this.updateGame(result);\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const result = this.moveTiles(false, false);\n            if (this.isStateDifferent(result.state)) this.updateGame(result);\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const result = this.moveTiles(false, true);\n            if (this.isStateDifferent(result.state)) this.updateGame(result);\n        }\n    }\n    /**\r\n   * @returns {number}\r\n   */ getScore() {\n        return this.score;\n    }\n    /**\r\n   * @returns {number[][]}\r\n   */ getState() {\n        return this.state;\n    }\n    /**\r\n   * Returns the current game status.\r\n   * class Game {\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */ getStatus() {\n        return this.status;\n    }\n    /**\r\n   * Starts the game.\r\n   */ start() {\n        this.restart();\n        this.status = \"playing\";\n        this.putNewNumber();\n        this.putNewNumber();\n    }\n    /**\r\n   * Resets the game.\r\n   */ restart() {\n        this.state = this.cloneState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n        this.firstMoveMade = false;\n    }\n    cloneState(state) {\n        const newState = [];\n        for(let row = 0; row < state.length; row++)newState.push([\n            ...state[row]\n        ]);\n        return newState;\n    }\n    isStateDifferent(newState) {\n        for(let row = 0; row < this.state.length; row++)for(let column = 0; column < this.state[row].length; column++){\n            if (this.state[row][column] !== newState[row][column]) return true;\n        }\n        return false;\n    }\n    updateGame(result) {\n        this.state = result.state;\n        this.score += result.score;\n        this.firstMoveMade = true;\n        this.putNewNumber();\n        if (this.isGameLost()) this.status = \"lose\";\n        else if (this.isGameWon()) this.status = \"win\";\n    }\n    getFirstMoveMade() {\n        return this.firstMoveMade;\n    }\n    getAvailableSpace() {\n        return this.state.reduce((space, row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                if (cell === 0) space.push({\n                    x: cellIndex,\n                    y: rowIndex\n                });\n            });\n            return space;\n        }, []);\n    }\n    getRandomSpace(space) {\n        return space[Math.floor(Math.random() * space.length)];\n    }\n    getNewNumber() {\n        return Math.floor(Math.random() * 10) === 0 ? 4 : 2;\n    }\n    putNewNumber() {\n        const availableSpace = this.getAvailableSpace();\n        const randomSpace = this.getRandomSpace(availableSpace);\n        this.state[randomSpace.y][randomSpace.x] = this.getNewNumber();\n    }\n    isGameLost() {\n        if (this.getAvailableSpace().length === 0) {\n            if (this.isStateDifferent(this.moveTiles(false, false).state) || this.isStateDifferent(this.moveTiles(true, true).state) || this.isStateDifferent(this.moveTiles(false, true).state) || this.isStateDifferent(this.moveTiles(true, false).state)) return false;\n            return true;\n        }\n        return false;\n    }\n    isGameWon() {\n        return this.state.some((row)=>row.some((cell)=>cell === 2048));\n    }\n    getCellCoords(horizontal, firstCoord, position) {\n        if (horizontal) return {\n            row: firstCoord,\n            column: position\n        };\n        return {\n            row: position,\n            column: firstCoord\n        };\n    }\n    moveTiles(horizontal, forward, addScore) {\n        const state = this.cloneState(this.state);\n        let score = 0;\n        const rowLength = state[0].length;\n        const columnLength = state.length;\n        let firstCoordLength;\n        let secondCoordLength;\n        if (horizontal) {\n            firstCoordLength = columnLength;\n            secondCoordLength = rowLength;\n        } else {\n            firstCoordLength = rowLength;\n            secondCoordLength = columnLength;\n        }\n        let initialSecondCoord;\n        let startOfStripe;\n        let endOfStirpe;\n        let step;\n        if (forward) {\n            initialSecondCoord = secondCoordLength - 2;\n            startOfStripe = -1;\n            endOfStirpe = secondCoordLength;\n            step = 1;\n        } else {\n            initialSecondCoord = 1;\n            startOfStripe = secondCoordLength;\n            endOfStirpe = -1;\n            step = -1;\n        }\n        for(let firstCoord = 0; firstCoord < firstCoordLength; firstCoord++){\n            const mergedInStripe = Array(secondCoordLength).fill(false);\n            for(let secondCoord = initialSecondCoord; secondCoord !== startOfStripe; secondCoord -= step){\n                let merged = false;\n                let position = secondCoord;\n                let currentCellCoords = this.getCellCoords(horizontal, firstCoord, position);\n                let nextCellCoords = this.getCellCoords(horizontal, firstCoord, position + step);\n                while(position + step !== endOfStirpe && (state[nextCellCoords.row][nextCellCoords.column] === 0 || state[nextCellCoords.row][nextCellCoords.column] === state[currentCellCoords.row][currentCellCoords.column] && !mergedInStripe[position + step] && !merged)){\n                    if (state[nextCellCoords.row][nextCellCoords.column] > 0) {\n                        merged = true;\n                        score += state[nextCellCoords.row][nextCellCoords.column] * 2;\n                    }\n                    state[nextCellCoords.row][nextCellCoords.column] += state[currentCellCoords.row][currentCellCoords.column];\n                    state[currentCellCoords.row][currentCellCoords.column] = 0;\n                    position += step;\n                    currentCellCoords = this.getCellCoords(horizontal, firstCoord, position);\n                    nextCellCoords = this.getCellCoords(horizontal, firstCoord, position + step);\n                }\n                if (merged) mergedInStripe[position] = true;\n            }\n        }\n        return {\n            state: state,\n            score: score\n        };\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nfunction $09e991522ca7e64e$var$refreshTable(state) {\n    const fieldRows = document.querySelectorAll(\".field-row\");\n    for(let row = 0; row < state.length; row++)for(let column = 0; column < state[row].length; column++){\n        const fieldCell = fieldRows[row].children[column];\n        const stateCell = state[row][column];\n        fieldCell.className = \"field-cell field-cell--\" + stateCell;\n        if (stateCell > 0) fieldCell.innerText = stateCell;\n        else fieldCell.innerText = \"\";\n    }\n}\nfunction $09e991522ca7e64e$var$refreshScore(score) {\n    document.querySelector(\".game-score\").innerText = score;\n}\nfunction $09e991522ca7e64e$var$refreshButton(firstMoveMade) {\n    if (firstMoveMade) {\n        $09e991522ca7e64e$var$button.className = \"button restart\";\n        $09e991522ca7e64e$var$button.innerText = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$button.className = \"button start\";\n        $09e991522ca7e64e$var$button.innerText = \"Start\";\n    }\n}\nfunction $09e991522ca7e64e$var$refreshMessage(gameStatus) {\n    const messages = document.querySelectorAll(\".message\");\n    messages.forEach((message)=>message.classList.add(\"hidden\"));\n    switch(gameStatus){\n        case \"idle\":\n            document.querySelector(\".message-start\").classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            document.querySelector(\".message-win\").classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$refresh() {\n    $09e991522ca7e64e$var$refreshTable($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$refreshScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$refreshButton($09e991522ca7e64e$var$game.getFirstMoveMade());\n    $09e991522ca7e64e$var$refreshMessage($09e991522ca7e64e$var$game.getStatus());\n}\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    switch($09e991522ca7e64e$var$button.innerText){\n        case \"Start\":\n            $09e991522ca7e64e$var$game.start();\n            break;\n        case \"Restart\":\n            $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$refresh();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowUp\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveLeft();\n    }\n    $09e991522ca7e64e$var$refresh();\n});\n\n\n//# sourceMappingURL=index.c332daef.js.map\n","'use strict';\r\n\r\nconst Game = require('../modules/Game.class');\r\nconst game = new Game();\r\n\r\nfunction refreshTable(state) {\r\n  const fieldRows = document.querySelectorAll('.field-row');\r\n\r\n  for (let row = 0; row < state.length; row++) {\r\n    for (let column = 0; column < state[row].length; column++) {\r\n      const fieldCell = fieldRows[row].children[column];\r\n      const stateCell = state[row][column];\r\n\r\n      fieldCell.className = 'field-cell field-cell--' + stateCell;\r\n\r\n      if (stateCell > 0) {\r\n        fieldCell.innerText = stateCell;\r\n      } else {\r\n        fieldCell.innerText = '';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction refreshScore(score) {\r\n  document.querySelector('.game-score').innerText = score;\r\n}\r\n\r\nfunction refreshButton(firstMoveMade) {\r\n  if (firstMoveMade) {\r\n    button.className = 'button restart';\r\n    button.innerText = 'Restart';\r\n  } else {\r\n    button.className = 'button start';\r\n    button.innerText = 'Start';\r\n  }\r\n}\r\n\r\nfunction refreshMessage(gameStatus) {\r\n  const messages = document.querySelectorAll('.message');\r\n\r\n  messages.forEach((message) => message.classList.add('hidden'));\r\n\r\n  switch (gameStatus) {\r\n    case 'idle':\r\n      document.querySelector('.message-start').classList.remove('hidden');\r\n      break;\r\n    case 'win':\r\n      document.querySelector('.message-win').classList.remove('hidden');\r\n      break;\r\n    case 'lose':\r\n      document.querySelector('.message-lose').classList.remove('hidden');\r\n      break;\r\n  }\r\n}\r\n\r\nfunction refresh() {\r\n  refreshTable(game.getState());\r\n  refreshScore(game.getScore());\r\n  refreshButton(game.getFirstMoveMade());\r\n  refreshMessage(game.getStatus());\r\n}\r\n\r\nconst button = document.querySelector('.button');\r\n\r\nbutton.addEventListener('click', () => {\r\n  switch (button.innerText) {\r\n    case 'Start':\r\n      game.start();\r\n      break;\r\n    case 'Restart':\r\n      game.restart();\r\n  }\r\n\r\n  refresh();\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n  switch (e.key) {\r\n    case 'ArrowUp':\r\n      e.preventDefault();\r\n      game.moveUp();\r\n      break;\r\n    case 'ArrowRight':\r\n      e.preventDefault();\r\n      game.moveRight();\r\n      break;\r\n    case 'ArrowDown':\r\n      e.preventDefault();\r\n      game.moveDown();\r\n      break;\r\n    case 'ArrowLeft':\r\n      e.preventDefault();\r\n      game.moveLeft();\r\n  }\r\n\r\n  refresh();\r\n});\r\n","'use strict';\r\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */\r\nclass Game {\r\n  /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */\r\n  constructor(\r\n    initialState = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n  ) {\r\n    if (\r\n      initialState.length === 4 &&\r\n      initialState.every((row) => row.length === 4)\r\n    ) {\r\n      this.initialState = initialState;\r\n      this.restart();\r\n    } else {\r\n      throw new Error('Initial state is not valid!');\r\n    }\r\n  }\r\n\r\n  moveLeft() {\r\n    if (this.status === 'playing') {\r\n      const result = this.moveTiles(true, false);\r\n\r\n      if (this.isStateDifferent(result.state)) {\r\n        this.updateGame(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  moveRight() {\r\n    if (this.status === 'playing') {\r\n      const result = this.moveTiles(true, true);\r\n\r\n      if (this.isStateDifferent(result.state)) {\r\n        this.updateGame(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  moveUp() {\r\n    if (this.status === 'playing') {\r\n      const result = this.moveTiles(false, false);\r\n\r\n      if (this.isStateDifferent(result.state)) {\r\n        this.updateGame(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  moveDown() {\r\n    if (this.status === 'playing') {\r\n      const result = this.moveTiles(false, true);\r\n\r\n      if (this.isStateDifferent(result.state)) {\r\n        this.updateGame(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  /**\r\n   * @returns {number[][]}\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Returns the current game status.\r\n   * class Game {\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  /**\r\n   * Starts the game.\r\n   */\r\n  start() {\r\n    this.restart();\r\n    this.status = 'playing';\r\n\r\n    this.putNewNumber();\r\n    this.putNewNumber();\r\n  }\r\n\r\n  /**\r\n   * Resets the game.\r\n   */\r\n  restart() {\r\n    this.state = this.cloneState(this.initialState);\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n    this.firstMoveMade = false;\r\n  }\r\n\r\n  cloneState(state) {\r\n    const newState = [];\r\n\r\n    for (let row = 0; row < state.length; row++) {\r\n      newState.push([...state[row]]);\r\n    }\r\n\r\n    return newState;\r\n  }\r\n\r\n  isStateDifferent(newState) {\r\n    for (let row = 0; row < this.state.length; row++) {\r\n      for (let column = 0; column < this.state[row].length; column++) {\r\n        if (this.state[row][column] !== newState[row][column]) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateGame(result) {\r\n    this.state = result.state;\r\n    this.score += result.score;\r\n    this.firstMoveMade = true;\r\n    this.putNewNumber();\r\n\r\n    if (this.isGameLost()) {\r\n      this.status = 'lose';\r\n    } else if (this.isGameWon()) {\r\n      this.status = 'win';\r\n    }\r\n  }\r\n\r\n  getFirstMoveMade() {\r\n    return this.firstMoveMade;\r\n  }\r\n\r\n  getAvailableSpace() {\r\n    return this.state.reduce((space, row, rowIndex) => {\r\n      row.forEach((cell, cellIndex) => {\r\n        if (cell === 0) {\r\n          space.push({\r\n            x: cellIndex,\r\n            y: rowIndex,\r\n          });\r\n        }\r\n      });\r\n\r\n      return space;\r\n    }, []);\r\n  }\r\n\r\n  getRandomSpace(space) {\r\n    return space[Math.floor(Math.random() * space.length)];\r\n  }\r\n\r\n  getNewNumber() {\r\n    return Math.floor(Math.random() * 10) === 0 ? 4 : 2;\r\n  }\r\n\r\n  putNewNumber() {\r\n    const availableSpace = this.getAvailableSpace();\r\n    const randomSpace = this.getRandomSpace(availableSpace);\r\n\r\n    this.state[randomSpace.y][randomSpace.x] = this.getNewNumber();\r\n  }\r\n\r\n  isGameLost() {\r\n    if (this.getAvailableSpace().length === 0) {\r\n      if (\r\n        this.isStateDifferent(this.moveTiles(false, false).state) ||\r\n        this.isStateDifferent(this.moveTiles(true, true).state) ||\r\n        this.isStateDifferent(this.moveTiles(false, true).state) ||\r\n        this.isStateDifferent(this.moveTiles(true, false).state)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isGameWon() {\r\n    return this.state.some((row) => row.some((cell) => cell === 2048));\r\n  }\r\n\r\n  getCellCoords(horizontal, firstCoord, position) {\r\n    if (horizontal) {\r\n      return {\r\n        row: firstCoord,\r\n        column: position,\r\n      };\r\n    }\r\n\r\n    return {\r\n      row: position,\r\n      column: firstCoord,\r\n    };\r\n  }\r\n\r\n  moveTiles(horizontal, forward, addScore) {\r\n    const state = this.cloneState(this.state);\r\n    let score = 0;\r\n\r\n    const rowLength = state[0].length;\r\n    const columnLength = state.length;\r\n    let firstCoordLength;\r\n    let secondCoordLength;\r\n\r\n    if (horizontal) {\r\n      firstCoordLength = columnLength;\r\n      secondCoordLength = rowLength;\r\n    } else {\r\n      firstCoordLength = rowLength;\r\n      secondCoordLength = columnLength;\r\n    }\r\n\r\n    let initialSecondCoord;\r\n    let startOfStripe;\r\n    let endOfStirpe;\r\n    let step;\r\n\r\n    if (forward) {\r\n      initialSecondCoord = secondCoordLength - 2;\r\n      startOfStripe = -1;\r\n      endOfStirpe = secondCoordLength;\r\n      step = 1;\r\n    } else {\r\n      initialSecondCoord = 1;\r\n      startOfStripe = secondCoordLength;\r\n      endOfStirpe = -1;\r\n      step = -1;\r\n    }\r\n\r\n    for (let firstCoord = 0; firstCoord < firstCoordLength; firstCoord++) {\r\n      const mergedInStripe = Array(secondCoordLength).fill(false);\r\n\r\n      for (\r\n        let secondCoord = initialSecondCoord;\r\n        secondCoord !== startOfStripe;\r\n        secondCoord -= step\r\n      ) {\r\n        let merged = false;\r\n        let position = secondCoord;\r\n\r\n        let currentCellCoords = this.getCellCoords(\r\n          horizontal,\r\n          firstCoord,\r\n          position,\r\n        );\r\n        let nextCellCoords = this.getCellCoords(\r\n          horizontal,\r\n          firstCoord,\r\n          position + step,\r\n        );\r\n\r\n        while (\r\n          position + step !== endOfStirpe &&\r\n          (state[nextCellCoords.row][nextCellCoords.column] === 0 ||\r\n            (state[nextCellCoords.row][nextCellCoords.column] ===\r\n              state[currentCellCoords.row][currentCellCoords.column] &&\r\n              !mergedInStripe[position + step] &&\r\n              !merged))\r\n        ) {\r\n          if (state[nextCellCoords.row][nextCellCoords.column] > 0) {\r\n            merged = true;\r\n            score += state[nextCellCoords.row][nextCellCoords.column] * 2;\r\n          }\r\n\r\n          state[nextCellCoords.row][nextCellCoords.column] +=\r\n            state[currentCellCoords.row][currentCellCoords.column];\r\n          state[currentCellCoords.row][currentCellCoords.column] = 0;\r\n          position += step;\r\n\r\n          currentCellCoords = this.getCellCoords(\r\n            horizontal,\r\n            firstCoord,\r\n            position,\r\n          );\r\n\r\n          nextCellCoords = this.getCellCoords(\r\n            horizontal,\r\n            firstCoord,\r\n            position + step,\r\n          );\r\n        }\r\n\r\n        if (merged) {\r\n          mergedInStripe[position] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      state: state,\r\n      score: score,\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","length","every","row","restart","Error","moveLeft","status","result","moveTiles","isStateDifferent","state","updateGame","moveRight","moveUp","moveDown","getScore","score","getState","getStatus","start","putNewNumber","cloneState","firstMoveMade","newState","push","column","isGameLost","isGameWon","getFirstMoveMade","getAvailableSpace","reduce","space","rowIndex","forEach","cell","cellIndex","x","y","getRandomSpace","Math","floor","random","getNewNumber","availableSpace","randomSpace","some","getCellCoords","horizontal","firstCoord","position","forward","addScore","firstCoordLength","secondCoordLength","initialSecondCoord","startOfStripe","endOfStirpe","step","rowLength","columnLength","mergedInStripe","Array","fill","secondCoord","merged","currentCellCoords","nextCellCoords","$09e991522ca7e64e$var$refresh","$09e991522ca7e64e$var$refreshTable","fieldRows","document","querySelectorAll","fieldCell","children","stateCell","className","innerText","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$refreshMessage","gameStatus","messages","message","classList","add","remove","addEventListener","e","key","preventDefault"],"version":3,"file":"index.c332daef.js.map"}